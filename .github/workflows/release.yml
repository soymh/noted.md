name: Release

on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  build-and-upload:
    name: Build (${{ matrix.build }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write 

    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev libssl-dev pkg-config

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package the binary
        shell: bash
        run: |
          BINARY_NAME="notedmd"
          RELEASE_VERSION="${{ github.ref_name }}"

          ROOT_DIR="${BINARY_NAME}-${RELEASE_VERSION}-${{ matrix.target }}"
          mkdir -p "${ROOT_DIR}/bin"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            SOURCE_FILE="target/${{ matrix.target }}/release/${BINARY_NAME}.exe"
            cp "$SOURCE_FILE" "${ROOT_DIR}/bin/"
          else
            SOURCE_FILE="target/${{ matrix.target }}/release/${BINARY_NAME}"
            cp "$SOURCE_FILE" "${ROOT_DIR}/bin/"
            chmod +x "${ROOT_DIR}/bin/${BINARY_NAME}"
          fi

          cp LICENSE README.md CHANGELOG.md "${ROOT_DIR}/"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ASSET_NAME="${ROOT_DIR}.zip"
            7z a "$ASSET_NAME" "$ROOT_DIR"
            echo "ASSET=${ASSET_NAME}" >> $GITHUB_ENV
          else
            ASSET_NAME="${ROOT_DIR}.tar.gz"
            tar -czf "$ASSET_NAME" "$ROOT_DIR"
            echo "ASSET=${ASSET_NAME}" >> $GITHUB_ENV
          fi

      - name: Upload binary
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET }}
          generate_release_notes: true
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}.
            See changes below.

